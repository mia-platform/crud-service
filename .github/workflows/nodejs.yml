name: Node.js CI

on:
  push:
    branches:
      - "main"
    tags:
      - "v*"
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Execute tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        mongodb-version: ['4.2', '4.4', '5.0', '6.0']

    steps:
      - uses: actions/checkout@v3
      - name: use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: update libraries and install curl
        run: sudo apt-get update && sudo apt-get install curl -y

      - name: download MongoDB encryption libraries (to support testing encryption features)
        run: curl https://repo.mongodb.com/apt/debian/dists/bullseye/mongodb-enterprise/5.0/main/binary-amd64/mongodb-enterprise-cryptd_5.0.14_amd64.deb -o mongocryptd.deb && curl https://libmongocrypt.s3.amazonaws.com/apt/debian/dists/buster/libmongocrypt/1.6/main/binary-amd64/libmongocrypt-dev_1.6.2-0_amd64.deb -o libmongocrypt-dev.deb && curl https://libmongocrypt.s3.amazonaws.com/apt/debian/dists/buster/libmongocrypt/1.6/main/binary-amd64/libmongocrypt0_1.6.2-0_amd64.deb -o libmongocrypt0.deb

      - name: install MongoDB encryption libraries
        run: sudo apt-get install -f ./mongocryptd.deb ./libmongocrypt0.deb ./libmongocrypt-dev.deb -y

      - name: start MongoDB instance
        uses: supercharge/mongodb-github-action@1.9.0
        with:
          mongodb-version: ${{ matrix.mongodb-version }}

      - run: npm ci

      - run: npm run lint

      - name: Execute tests
        run: npm run coverage
        env:
          MONGO_VERSION: ${{ matrix.mongodb-version }}

      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
        # allow the pipeline to continue even when the coverage decreases
        continue-on-error: true

  build:
    name: Build docker image
    needs: test
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/mia-platform/crud-service
            docker.io/miaplatform/crud-service
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          labels: |
            org.opencontainers.image.documentation=https://github.com/mia-platform/crud-service

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.BOT_DOCKER_USERNAME }}
          password: ${{ secrets.BOT_DOCKER_TOKEN }}

      - name: Prepare build cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  security-checks:
    needs:
      - build
    name: Triggers security checks
    runs-on: ubuntu-latest

    steps:
      - name: Invoke API
        if: ${{ inputs.push }}
        run: |
          curl --request POST \
            --form token=${{ secrets.CRUD_SERVICE_SYSDIG_CHECK_TRIGGER }} \
            --form ref=main \
            --form "variables[VERSION]=${{ inputs.version }}" \
            --form "variables[CHECKSUM]=${{ needs.release-docker.outputs.checksum }}" \
            "https://git.tools.mia-platform.eu/api/v4/projects/86291/trigger/pipeline"

